############
Loading Data
############

As you saw in the Overview Chapter, Arches-HIP is designed to allow you to create inventories of cultural heritage.  With HIP, you can import heritage data from a simple (but powerful) text file or from your GIS using a shapefile.  If you prefer, you can use the HIP's data entry forms to create heritage records.  

In order to use HIP three types of data must be loaded to the database: resource graphs, authority documents and cultural heritage data. Below we outline what data comes included with HIP, simple instructions on how this data can be modified and how to create your own cultural heritage data.


Included Graphs
---------------
The HIP package includes the following six resource graphs for cataloging cultural heritage:

	* Activity.E7
	* Actor.E39
	* Heritage Resource.E18
	* Heritage Resource Group.E27
	* Historical Event.E5
	* Information Resource.E73


To ensure data quality, the HIP implements a "Reference Data Manager" (RDM) that you will use to manage **controlled vocabularies** that ensure that your data are entered consistently and are easy to retrieve.

So, you'll need to follow these steps to create or import cultural heritage data into HIP:

	1. Create the controlled vocabularies that you'll use to constrain data entry.

	2. Load your controlled vocabularies into HIP

	3. Import your existing cultural heritage data into HIP using either the shapefile loader or the .arches loader

	4. Manage your existing data or create new data records with the HIP's data entry forms.


A Note on Controlled Vocabularies and Authority Documents
=========================================================
Let's look at the idea of controlled vocabularies in a bit more detail.  Consider the following problem:  

	You have people creating cultural heritage data, specifically information about buildings.  You want to ensure that all your data are created consistently and wish to use just an approved list of possible terms to describe the architectural style of a building.  For example, you want all the data creators to select a style from the following list: "Craftsman", "Beaux Arts", "Bauhaus".  How do you do this?


Arches-HIP requires that you decide on the list of terms (we call them "Controlled Vocabularies") that you will use to ensure your heritage data are created and managed using just the terms that you approve of.  In Arches, Controlled Vocabularies may be simple word lists such as "Good, Fair, Poor" to describe the condition of a building.  Or a Controlled Vocabulary could be a poly-hierarchical, multi-lingual thesaurus.  You may decide just how sophisticated your controlled vocabularies need to be to support your cultural heritage data management needs.

Recall from the Chapter on Arches-HIP Data Resources that HIP implements a number of controlled vocabularies.  Each controlled vocabulary is defined in an Authority File. 

The very first step to loading your cultural heritage data into Arches-HIP is to ensure that each authority file includes the terms you wish to use to describe your heritage data.



Step 1: Create and Load Controlled Vocabularies into Arches-HIP
---------------------------------------------------------------

Start your data load with a review of Arches-HIP's default authority documents.  Navigate to ``/my_hip_app/my_hip_app/source_data/concepts/authority_files`` to view the set of authority files.  You'll want to review the default entries in each file before loading the authority files into Arches-HIP.

In some instances you may wish to modify the existing HIP authority files. You have two options:

	1. You may modify the authority files before you load them into HIP

	2. You may use the Reference Data Manager (RDM) to modify the authority files after loading them into HIP and BEFORE you load your cultural heritage data.


Modifying HIP Authority Files
=============================

The following steps outline how to modify the authority documents before you load them into HIP. These steps can be followed using excel as your text editor but the final file must be saved as a UTF-8 formatted CSV file.

Note: You can find a summary of authority documents, their format, and steps for modifying them at `Arches Documentation <http://arches3.readthedocs.org/en/latest/arches-data/#resource-graphs>`_ under the **Reference Data Graph** section

The steps for modifying authority documents BEFORE you load them into Arches-HIP is:


	#. Navigate to your authority files directory. Open the file you wish to modify.
	#. If you would like to edit an existing concept simply change the PrefLabel, AltLabels, ParentConceptid, ConceptType, Provider for that concept as necessary. Be sure to adhere to the rules for concept creation outlined in the `Arches Documentation <http://arches3.readthedocs.org/en/latest/>`_ .
	#. If you would like to add a concept, create a unique ``conceptid`` for the concept (remember this id must be unique both internal to the authority file and between authority files) and then add your desired PrefLabel, AltLabels, ParentConceptid, ConceptType, Provider.
	#. Make sure to review the guidelines of creating a concept in the 'Loading Reference Data' section of the `Arches Documentation <http://arches3.readthedocs.org/en/latest/>`_ before modifying the HIP documents to ensure your edited documents will function with HIP.



Modifying Authority Files using the Reference Data Manager
==========================================================

After you load authority files into Arches-HIP, you may use the Reference Data Manager to modify the terms in each controlled vocabulary.  


Load Authority Files
====================

To load authority documents, navigate to ``/my_hip_app`` and run the following command::
	
	$ python manage.py packages -o load_concept_scheme -s 'path to authority files directory'

During load the authority files go through a set of validations. If there are errors in your authority documents load will fail and you will have to correct the errors before you try to load the authority files again.

.. note:: A detailed log of any errors detected in the authority files can be found here: ``/my_hip_app/logs/authority_file_errors.txt``



Step 2: Creating and Loading Cultural Heritage Data into Arches-HIP
-------------------------------------------------------------------

This section outlines how to create and load cultural heritage data into Arches-HIP. Arches-HIP allows you to load data from a ``.arches`` file or from a GIS (Geographic Information System) using a ``.shp`` file. 

If you would like to use Arches-HIP's data entry forms to create your cultural heritage data, feel free to skip this section entirely. If you would like to load Arches-HIP sample data and not create your own cultural heritage data skip to 'Loading cultural heritage Data.' 

If you would like to create and load your own Arches-HIP cultural heritage data this whole section is for you!


Creating Cultural Heritage Data
===============================

The Arches-HIP resource graphs provide the skeleton of the ``.arches`` or ``.shp`` file you will create, the authority files define the acceptable values for certain attributes, and your own heritage data populates the nodes of the Arches-HIP resource graphs with unique data.


**Creating a ``.arches`` file**

For general directions on how to create a ``.arches`` file you'll want to refer to the 'Loading Business Data' section of the `Arches Documentation <http://arches3.readthedocs.org/en/latest/>`_. This section will review rules specific to creating a ``.arches`` file based on HIP graphs.

#.	In this example we'll begin by creating a text file called ``example.arches`` and adding the following text to the first line::

		RESOURCEID|RESOURCETYPE|ATTRIBUTENAME|ATTRIBUTEVALUE|GROUPID

#.	On the second line enter your unique resourceid followed by a ``|``::

		RESOURCEID|RESOURCETYPE|ATTRIBUTENAME|ATTRIBUTEVALUE|GROUPID
		unique_resource_id|

#.	Now add a valid Arches-HIP resource type followed by a ``|``::
		
		RESOURCEID|RESOURCETYPE|ATTRIBUTENAME|ATTRIBUTEVALUE|GROUPID
		unique_resource_id|ACTIVITY.E7|

	.. note:: Valid Arches-HIP resource types include: 

		* Activity.E7
		* Actor.E39
		* Heritage Resource.E18
		* Heritage Resource Group.E27
		* Historical Event.E5
		* Information Resource.E73

#.	Remember, ``ATTRIBUTENAME`` in the ``.arches`` file relates directly to entity type from a resource graph. In fact the only valid values for ``ATTRIBUTENAME`` in the ``.arches`` file are entity types from the resource graph nodes file indicated in ``RESOURCETYPE`` column.

	Look `here <loading-data.html#resource-graphs>`_ for a list of entity types for each Arches-HIP resource. 

	Add the entity type name from the graph to the ``ATTRIBUTENAME`` column in your CSV followed by a ``|``::

		RESOURCEID|RESOURCETYPE|ATTRIBUTENAME|ATTRIBUTEVALUE|GROUPID
		unique_resource_id|ACTIVITY.E7|START_DATE_OF_EXISTENCE.E49|

#.	Next in the ``ATTRIBUTENAME`` 'column' input your specific information for that attribute ensuring that it is in the correct format for that data type (i.e. is formatted correctly for the attributes business table) followed by a ``|``::

		RESOURCEID|RESOURCETYPE|ATTRIBUTENAME|ATTRIBUTEVALUE|GROUPID
		unique_resource_id|ACTIVITY.E7|START_DATE_OF_EXISTENCE.E49|1945-01-12|

#.	Finally, if the data item is to be grouped with another piece of data make sure to add a ``GROUPID`` that matches the other data item. If the data item is not intended to be grouped simply enter a generic value for ``GROUPID``::

		RESOURCEID|RESOURCETYPE|ATTRIBUTENAME|ATTRIBUTEVALUE|GROUPID
		unique_resource_id|ACTIVITY.E7|START_DATE_OF_EXISTENCE.E49|1945-01-12|BEGINNING_OF_EXISTENCE.E63-0
		unique_resource_id|ACTIVITY.E7|BEGINNING_OF_EXISTENCE_TYPE.E55|BEGIN_EXIST:1|BEGINNING_OF_EXISTENCE.E63-0

	Here the ``START_DATE_OF_EXISTENCE.E49`` attribute is grouped together with a ``BEGINNING_OF_EXISTENCE_TYPE.E55`` attribute.

	.. note:: A few things to remember:

		#. All attributes of a resource must be on adjacent lines in your .arches file.
		#. Some attributes must be paired with another attribute to have meaning. For instance, a BEGINNING_OF_EXISTENCE_TYPE.E55 attribute would have no meaing if not paired with a START_DATE_OF_EXISTENCE.E49 attribute.

	.. note:: Here is a list of attributes that must be paired in Arches-HIP:

		* ``BEGINNING_OF_EXISTENCE_TYPE.E55``, ``START_DATE_OF_EXISTENCE.E49``
		* ``END_OF_EXISTENCE_TYPE.E55``, ``END_DATE_OF_EXISTENCE.E49``
		* ``NAME.E41``, ``NAME_TYPE.E55``
		* ``DESCRIPTION.E62``, ``DESCRIPTION_TYPE.E55``
		* ``RIGHT.E30``, ``RIGHT_TYPE.E55``
		* ``TITLE.E41``, ``TITLE_TYPE.E55``
		* ``ACTOR_APPELLATION.E82``, ``NAME_TYPE.E55``

#.	In some instances you may want to relate resources together (e.g. you may want to relate many resources to one resource district or an actor to a particular heritage resource). To do this you will want to create a .relations file to accompany your .arches file. The .relations file should have the same name as your .arches file and be stored in the same location. The .relations file contains six columns resourceid_from, resourceid_to, start_date, end_date, relation_type, notes. For more instructions on how to create a .relations file see the `Arches Documentation <http://arches3.readthedocs.org/en/latest/>`_.

	.. note:: In order to create a relationship between two resources both resourceids referenced in the .relations file must be present in your .arches file.



**Creating a ``.shp`` configuration file**

.. note:: A few things to keep in mind before we begin

	* Your shapefile can contain only one resource type per shapefile. For example, you would need one shapefile to load Heritage Resources and a second shapefile for Activities.
	* Your shapefile projection must be defined as WGS84 Lat/Lon (EPSG:4326).

#.	**Create your configuration file**

	You’ll need to create configuration file to tell Arches how the fields in your shapefile correspond to nodes in a resource graph. The configuration file should have the same base name as your shapefile with the extension ``.config``. For example, if your shapefile is called ``heritage_resources.shp``, you will will need a ``heritage_resources.config`` file along with your ``heritage_resources.dbf``, etc.

	The ``.config`` file is formatted in JSON as you can see in this example::

		{
			“RESOURCE_TYPE”: “HERITAGE_RESOURCE.E18″,
			“GEOM_TYPE”: “SPATIAL_COORDINATES_GEOMETRY.E47″,
			“FIELD_MAP”: [
				[“status”,”STATUS.E55″],
				[“start”,”START_DATE_OF_EXISTENCE.E49″],
				[“name”,”NAME.E41″],
				[“place_addr”,”PLACE_ADDRESS.E45″],
				[“descrip”,”DESCRIPTION.E62″],
				[“heri_type”,”HERITAGE_RESOURCE_TYPE.E55″]
			]
		}
	
	The JSON should contain the following properties: 

		* ``RESOURCE_TYPE``: the resource type of your shapefile.
		* ``GEOM_TYPE``: the name of the entity type that Arches HIP uses to manage geometry.
		* ``FIELD_MAP``: a list of shapefile fields and their corresponding entity types. Each field must be enclosed in brackets, with the shapefile column name in the first position and the ``entitytypeid`` in the second.


	.. note:: The curly braces at the beginning and end of the file are important!


#.	**Confirm Your Shapefile Data**

	There are just a couple of details to keep in mind when creating your shapefile.

	Remember that the projection of your data must be EPSG:4326 (WGS84 Lat/Lon).

	The data type of your shapefile columns need to match the datatype of the nodes (entitytypes) to which they are mapped. For example, if you want to load a “name” column in your shapefile to “NAME.E41” (which the HIP defines as a “string” data type), you must ensure that your shapefile treats “name” as a string.

	If you want to load a field in your shapefile to an Arches controlled vocabulary, you’ll need to make sure that the values in the shapefile match a preferred label in Arches’ Reference Data Manager (RDM). For example, if you want to load values from your shapefile into the ``HERITAGE_RESOURCE_TYPE.E55`` node, the values in your shapefile column must match a preferred label in the RDM scheme (by default Arches uses the ``HERITAGE_RESOURCE_TYPE_AUTHORITY_DOCUMENT.csv`` scheme)



Load Heritage Data Files
========================

To load cultural heritage data, navigate to ``/my_hip_app`` and run the following command::
	
	$ python manage.py packages -o load_resources -s ‘path to file’

.. note:: This command works for both ``.arches`` and ``.shp`` files.


**Arches-HIP Data Validation**

In addition to the validation that is performed on every ``.arches`` file from Arches, there is some specific HIP validation that a ``.arches`` file must pass as well. These validations are listed below:
	
	#.	**Check Duplicates in Group**

		Some entity type groups should only ever contain zero or one of a certain entity type. For instance, every ``NAME.E41`` should be associated to one and only one ``NAME_TYPE.E55``. You may have multiple names per resource or the same name repeated multiple times but each instance of ``NAME.E41`` should be associated with one and only one ``NAME_TYPE.E55``. Here's a list of entity types that must appear only zero or one times in a given group.

			* ``ACTOR_APPELLATION.E82``
			* ``ADDRESS_TYPE.E55``
			* ``COMPONENT_TYPE.E55``
			* ``CULTURAL_PERIOD.E55``
			* ``DESCRIPTION.E62``
			* ``DESCRIPTION_TYPE.E55``
			* ``EVALUATION_CRITERIA_TYPE.E55``
			* ``FILE_PATH.E62``
			* ``FROM_DATE.E49``
			* ``HERITAGE_RESOURCE_TYPE.E55``
			* ``HERITAGE_RESOURCE_USE_TYPE.E55``
			* ``NAME.E41``
			* ``NAME_TYPE.E55``
			* ``PLACE_ADDRESS.E45``
			* ``RIGHT.E30``
			* ``RIGHT_TYPE.E55``
			* ``THUMBNAIL.E62``
			* ``TITLE.E41``
			* ``TITLE_TYPE.E55``
			* ``TO_DATE.E49``

		Remember there can be multiple instances of these entity types per resource just not per group within resource.

	#.	Check Paired Attributes**

		Some attributes should always be paired with another attribute. For example, for each NAME_TYPE.E55 in your .arches file there should be a corresponding NAME.E41, otherwise the NAME_TYPE.E55 does not describe anything. Arches-HIP checks to see that the following attriubtes are paired in your .arches file.

			* ``BEGINNING_OF_EXISTENCE_TYPE.E55``, ``START_DATE_OF_EXISTENCE.E49``
			* ``END_OF_EXISTENCE_TYPE.E55``, ``END_DATE_OF_EXISTENCE.E49``
			* ``NAME.E41``, ``NAME_TYPE.E55``
			* ``DESCRIPTION.E62``, ``DESCRIPTION_TYPE.E55``
			* ``RIGHT.E30``, ``RIGHT_TYPE.E55``
			* ``TITLE.E41``, ``TITLE_TYPE.E55``
			* ``ACTOR_APPELLATION.E82``, ``NAME_TYPE.E55``


.. note:: Any validation errors that occur during a data load can be viewed in the following file: ``my_hip_app/my_hip_app/logs/validation_errors.txt``


Unloading Cultural Heritage Data
--------------------------------

If you managed to load data that you did not intend to load, or if for some reason you changed your mind about loading your data, don’t worry. You can easily unload a batch of data from Arches.

To do this you will need the Load ID that was created when you loaded your data. Arches writes the Load ID to the terminal you used to start the import, and the Load ID is also located in the notes column of your ``data.edit_log`` table.

The Load ID will look something like this: “LOADID:2014-12-2-7-17-23884” (e.g.: the timestamp by year-month-day-hour-minute-microsecond) of the start of your resource load, so that may help you find the correct Load ID if you are unsure.

Once you have the correct Load ID, you can delete all of the resources created during a load with the following command::

	$ python manage.py packages -o remove_resources –load_id YOUR_LOADID


In order to use HIP three types of data must be loaded to the database: resource graphs, authority documents and cultural heritage data. Below we outline what data comes included with HIP, simple instructions on how this data can be modified and how to create your own cultural heritage data.




